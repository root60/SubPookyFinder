import base64
import sys

ENCRYPTED_CODE = """
"""

def main():
    try:
        decoded_code = base64.b64decode(ENCRYPTED_CODE).decode('utf-8')
        exec(decoded_code, {"__name__": "__main__", "__builtins__": __builtins__})
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()